{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This extension facilitates the application of this design pattern in Flask </p> <p> </p> <p>Designed to allow developers to implement the Model-View-Controller (MVC) design pattern in Flask applications with the help of this extension.</p> <p>Install MVC Flask using pip:</p> <pre><code>$ pip install mvc_flask\n</code></pre> <p>Install MVC Flask using poetry:</p> <pre><code>$ poetry add mvc_flask\n</code></pre> <p>Now, let's get started:</p> <pre><code>from flask import Flask\nfrom mvc_flask import FlaskMVC\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\ndef create_app():\n    app = Flask(__name__)\n    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///blog.db'\n\n    # registering extensions\n    FlaskMVC(app)\n    db.init_app(app)\n\n    return app\n</code></pre> <p></p>"},{"location":"#features","title":"Features","text":"<p>MVC Flask builds on provides the best architecture experience for Flask, and gives you:</p> <ul> <li>You can directories as controllers, models, and views.</li> <li>It Supports the controllers' creation, and you can separate the logic of your application of business rules</li> <li>You can separate routes of business rules</li> <li>You can use the before_action to execute a specific code</li> <li>You can integrate with other extensions of Flask, Flask-SQLAlchemy, Flask-Migrate, etc.</li> </ul>"},{"location":"#dependencies","title":"Dependencies","text":"<p>MVC Flask just depends on the Flask extensions to working and requires Python &gt;=3.8.0,&lt;4.0.0.</p>"},{"location":"controllers/","title":"Controllers","text":"<p>Now that configured routes, the <code>home_controller.py</code> file must contain the HomeController class, registering the action.</p> <p>from flask import render_template</p> <pre><code>class HomeController:\n    def index(self):\n        return render_template(\"index.html\")\n</code></pre>"},{"location":"controllers/#callbacks","title":"Callbacks","text":"<p>You can use the callbacks as <code>before_request</code> and <code>after_request</code> to called the function before or after request... See:</p> <pre><code>class HomeController:\n    before_request = dict(callback=\"hi\", actions=\"index\")\n\n    def index(self):\n        return \"home\"\n\n    def hi(self):\n        ...\n</code></pre> <p>The method <code>hi(self)</code> will be called whenever the visitors access the controller.</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>To start the use <code>mvc_flask</code> you need to import and register in your application, e.g:</p> <pre><code>from flask import Flask\nfrom mvc_flask import FlaskMVC\n\napp = Flask(__name__)\nFlaskMVC(app)\n</code></pre> <p>Or use <code>application factories</code>, e.g:</p> <pre><code>mvc = FlaskMVC()\n\ndef create_app():\n  ...\n  mvc.init_app(app)\n</code></pre> <p>Now, you can use src as the default directory to prepare your application. Your structure should look like this:</p> <pre><code>app\n\u251c\u2500\u2500 __ini__.py\n\u251c\u2500\u2500 controllers\n\u2502   \u2514\u2500\u2500 home_controller.py\n\u251c\u2500\u2500 routes.py\n\u2514\u2500\u2500 views\n    \u251c\u2500\u2500 index.html\n</code></pre> <p>By default, the mvc_flask assumes that your application directory will be app and if it doesn't exist, create it! If you can use another directory, you can use the path parameter when the instance of FlaskMVC is initialized. E.g:</p> <pre><code>mvc = FlaskMVC()\n\ndef create_app():\n  ...\n  mvc.init_app(app, path='src')\n</code></pre>"},{"location":"router/","title":"Router","text":"<p>You can create routes in <code>app/routes.py</code> and after creating file, you can start to register routes, e.g:</p> <pre><code>from mvc_flask import Router\n\nRouter.get(\"/\", \"home#index\")\n</code></pre> <p>The same must be done to <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods. E.g: <code>Router.post(\"/messages\", \"messages#create\")</code></p> <p>The first param represents the relative path and the second represents the controller#action. Remember that we are working with an MVC pattern, so we have a controller and action.</p> <p>The controller can be created in <code>app/controllers</code> and action is a method of the controller.</p> <p>You can use <code>Router.all()</code> to register all routes of CRUD.</p> <pre><code>Router.all(\"messages\")\n</code></pre> <p>The previous command produces this:</p> <pre><code>messages.create  POST        /messages\nmessages.delete  DELETE      /messages/&lt;id&gt;\nmessages.edit    GET         /messages/&lt;id&gt;/edit\nmessages.index   GET         /messages\nmessages.new     GET         /messages/new\nmessages.show    GET         /messages/&lt;id&gt;\nmessages.update  PATCH, PUT  /messages/&lt;id&gt;\n</code></pre> <p>You can also use only parameters to control routes, e.g:</p> <pre><code>Router.all(\"messages\", only=\"index show new create\")\n</code></pre> <p>The previous command produces this:</p> <pre><code>messages.index   GET      /messages\nmessages.show    GET      /messages/&lt;id&gt;\nmessages.new     GET      /messages/new\nmessages.create  POST     /messages\n</code></pre> <p>The parameter only accept <code>string</code> or <code>array</code>, so, you can use <code>only=[\"index\", \"show\", \"new\", \"create\"]</code> or <code>only='index show new create'</code></p>"},{"location":"router/#namespaces","title":"Namespaces","text":"<p>You can use namespaces to group the routes.</p> <pre><code>from mvc_flask import Router\n\napi = Router.namespace(\"/api/v1\")\n\napi.get(\"/health\", \"health#index\")\n\napi.all(\"user\")\n\nposts = api.namespace(\"/posts\")\nposts.get(\"\", \"posts#index\")\nposts.post(\"\", \"posts#create\")\nposts.get(\"/&lt;id&gt;\", \"posts#show\")\nposts.put(\"/&lt;id&gt;\", \"posts#update\")\nposts.get(\"/&lt;id&gt;\", \"posts#delete\")\n</code></pre> <p>The previous command produces this:</p> <pre><code>health.index     GET         /api/v1/health\nposts.create     POST        /api/v1/posts\nposts.delete     GET         /api/v1/posts/&lt;id&gt;\nposts.index      GET         /api/v1/posts\nposts.show       GET         /api/v1/posts/&lt;id&gt;\nposts.update     PATCH, PUT  /api/v1/posts/&lt;id&gt;\nuser.create      POST        /api/v1/user\nuser.delete      DELETE      /api/v1/user/&lt;id&gt;\nuser.edit        GET         /api/v1/user/&lt;id&gt;/edit\nuser.index       GET         /api/v1/user\nuser.new         GET         /api/v1/user/new\nuser.show        GET         /api/v1/user/&lt;id&gt;\nuser.update      PATCH, PUT  /api/v1/user/&lt;id&gt;\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>We know that the HTML form doesn't send the payload for methods other than Get and Post. But, the FLASK MVC does the work for you, everything you need is to add the tag in the HTML template. Look:</p> <pre><code># app/controllers/messages_controller.py\n\nfrom flask import render_template, redirect, url_for, flash, request\n\nclass MessagesController:\n    def edit(self, id):\n        message = Message.query.get(id)\n\n        return render_template(\"messages/edit.html\", message=message)\n\n    def update(self, id):\n        message = Message.query.get(id)\n        message.title = request.form.get('title')\n\n        db.session.add(message)\n        db.session.commit()\n        flash('Message sent successfully!')\n\n        return redirect(url_for(\".edit\"))\n</code></pre> <pre><code>&lt;!--  app/views/messages/edit.html --&gt;\n\n{% block content %}\n  &lt;form action=\"{{ url_for('messages.update', id=message.id) }}\" method=\"post\"&gt;\n    {{ method('PUT') }}\n    &lt;input type=\"text\" name=\"title\" id=\"title\" value=\"Yeahh!\"&gt;\n\n    &lt;input type=\"submit\" value=\"send\"&gt;\n  &lt;/form&gt;\n{% endblock %}\n</code></pre> <p>You can use the <code>{{ method('PUT|DELETE|PATCH') }}</code> to creates supports for PUT and DELETE methods to forms.</p>"},{"location":"views/","title":"Views","text":"<p>Flask uses the templates directory by default to store HTML files. However, using the <code>mvc-flask</code> the default becomes <code>views</code>. You can use the app/views directory to store templates.</p> <p>Please if you create template, use <code>views</code> for folder name, instead of <code>templates</code>.</p>"}]}